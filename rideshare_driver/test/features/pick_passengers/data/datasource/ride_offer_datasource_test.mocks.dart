// Mocks generated by Mockito 5.4.2 from annotations
// in rideshare/test/features/pick_passengers/data/datasource/ride_offer_datasource_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:signalr_core/signalr_core.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HubConnection].
///
/// See the documentation for Mockito's code generation for more information.
class MockHubConnection extends _i1.Mock implements _i2.HubConnection {
  MockHubConnection() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get serverTimeoutInMilliseconds => (super.noSuchMethod(
        Invocation.getter(#serverTimeoutInMilliseconds),
        returnValue: 0,
      ) as int);
  @override
  set serverTimeoutInMilliseconds(int? _serverTimeoutInMilliseconds) =>
      super.noSuchMethod(
        Invocation.setter(
          #serverTimeoutInMilliseconds,
          _serverTimeoutInMilliseconds,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get keepAliveIntervalInMilliseconds => (super.noSuchMethod(
        Invocation.getter(#keepAliveIntervalInMilliseconds),
        returnValue: 0,
      ) as int);
  @override
  set keepAliveIntervalInMilliseconds(int? _keepAliveIntervalInMilliseconds) =>
      super.noSuchMethod(
        Invocation.setter(
          #keepAliveIntervalInMilliseconds,
          _keepAliveIntervalInMilliseconds,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: '',
      ) as String);
  @override
  set baseUrl(String? url) => super.noSuchMethod(
        Invocation.setter(
          #baseUrl,
          url,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<void>? start() => (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>?);
  @override
  _i3.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> send({
    String? methodName,
    List<dynamic>? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [],
          {
            #methodName: methodName,
            #args: args,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Stream<T?> stream<T>(
    String? methodName, {
    List<dynamic>? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #stream,
          [methodName],
          {#args: args},
        ),
        returnValue: _i3.Stream<T?>.empty(),
      ) as _i3.Stream<T?>);
  @override
  _i3.Future<dynamic> invoke(
    String? methodName, {
    List<dynamic>? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #invoke,
          [methodName],
          {#args: args},
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);
  @override
  void on(
    String? methodName,
    _i2.MethodInvocationFunc? newMethod,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [
            methodName,
            newMethod,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void off(
    String? methodName, {
    _i2.MethodInvocationFunc? method,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #off,
          [methodName],
          {#method: method},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onclose(_i2.ClosedCallback? callback) => super.noSuchMethod(
        Invocation.method(
          #onclose,
          [callback],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onreconnecting(_i2.ReconnectingCallback? callback) => super.noSuchMethod(
        Invocation.method(
          #onreconnecting,
          [callback],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onreconnected(_i2.ReconnectedCallback? callback) => super.noSuchMethod(
        Invocation.method(
          #onreconnected,
          [callback],
        ),
        returnValueForMissingStub: null,
      );
}
