// Mocks generated by Mockito 5.4.2 from annotations
// in rideshare/test/features/pick_passengers/domain/usecase/add_passenger_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rideshare/core/errors/failures.dart' as _i5;
import 'package:rideshare/features/pick_passengers/domain/entity/ride_offer.dart'
    as _i6;
import 'package:rideshare/features/pick_passengers/domain/entity/ride_request.dart'
    as _i7;
import 'package:rideshare/features/pick_passengers/domain/repository/ride_offer.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RideOfferRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRideOfferRepository extends _i1.Mock
    implements _i3.RideOfferRepository {
  MockRideOfferRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, _i4.Stream<List<_i6.RideOffer>>>> getRideOffers(
          _i7.RideRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRideOffers,
          [request],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.Failure, _i4.Stream<List<_i6.RideOffer>>>>.value(
            _FakeEither_0<_i5.Failure, _i4.Stream<List<_i6.RideOffer>>>(
          this,
          Invocation.method(
            #getRideOffers,
            [request],
          ),
        )),
      ) as _i4
          .Future<_i2.Either<_i5.Failure, _i4.Stream<List<_i6.RideOffer>>>>);
  @override
  _i2.Either<_i5.Failure, bool> stopSendingLocation(
          _i4.StreamController<dynamic>? carLocationStreamController) =>
      (super.noSuchMethod(
        Invocation.method(
          #stopSendingLocation,
          [carLocationStreamController],
        ),
        returnValue: _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #stopSendingLocation,
            [carLocationStreamController],
          ),
        ),
      ) as _i2.Either<_i5.Failure, bool>);
  @override
  _i2.Either<_i5.Failure, bool> updateDriverLocation(
          _i4.StreamController<dynamic>? carLocationController) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDriverLocation,
          [carLocationController],
        ),
        returnValue: _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #updateDriverLocation,
            [carLocationController],
          ),
        ),
      ) as _i2.Either<_i5.Failure, bool>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> addPassenger(String? rideOfferId) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPassenger,
          [rideOfferId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #addPassenger,
            [rideOfferId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> dropPassenger(
          String? rideOfferId) =>
      (super.noSuchMethod(
        Invocation.method(
          #dropPassenger,
          [rideOfferId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #dropPassenger,
            [rideOfferId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
